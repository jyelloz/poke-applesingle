load time;

var MAC_EPOCH = 946684800L;

type MacDate = struct {
  int32 seconds;
  method unix_timestamp = int64: {
    return (seconds as int64) + MAC_EPOCH;
  }
  method as_timespec = Timespec: {
    return Timespec { sec=unix_timestamp };
  }
  method from_timespec = (Timespec time) void: {
    seconds = (time.sec - MAC_EPOCH) as int32;
  }
  method set_earliest = void: {
    seconds = 1 <<. 31;
  }
  method _print = void: {
    var unix_ts = unix_timestamp;
    print "#<";
    if (unix_ts >= 0) {
      ptime(unix_ts);
    } else {
      printf "%i32x", seconds;
    }
    print ">";
  }
};

type FileDates = struct {
  MacDate creation;
  MacDate modification;
  MacDate backup;
  MacDate access;
};

fun filedatesnow = FileDates: {
  var now = gettimeofday;
  var dates = FileDates {};
  dates.creation.from_timespec(now);
  dates.modification.from_timespec(now);
  dates.backup.set_earliest();
  dates.access.set_earliest();
  return dates;
};
