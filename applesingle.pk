load applefiledates;
load applefinder;
load applersrc;
load applebase;

var AS_DATA         = 1,
    AS_RSRC         = 2,
    AS_REAL_NAME    = 3,
    AS_COMMENT      = 4,
    AS_ICON_BW      = 5,
    AS_ICON_COLOR   = 6,
    AS_FILE_DATES   = 8,
    AS_FINDER_INFO  = 9,
    AS_MAC_INFO     = 10,
    AS_PRODOS_INFO  = 11,
    AS_MSDOS_INFO   = 12,
    AS_SHORT_NAME   = 13,
    AS_AFP_INFO     = 14,
    AS_DIRECTORY_ID = 15;

var AS_TYPES = [
    AS_DATA,
    AS_RSRC,
    AS_REAL_NAME,
    AS_COMMENT,
    AS_ICON_BW,
    AS_ICON_COLOR,
    AS_FILE_DATES,
    AS_FINDER_INFO,
    AS_MAC_INFO,
    AS_PRODOS_INFO,
    AS_MSDOS_INFO,
    AS_SHORT_NAME,
    AS_AFP_INFO,
    AS_DIRECTORY_ID,
];

var AS_TYPE_NAME = [
  .[1]  = "DATA",
  .[2]  = "RSRC",
  .[3]  = "REAL_NAME",
  .[4]  = "COMMENT",
  .[5]  = "ICON_BW",
  .[6]  = "ICON_COLOR",
  .[8]  = "FILE_DATES",
  .[9]  = "FINDER_INFO",
  .[10] = "MAC_INFO",
  .[11] = "PRODOS_INFO",
  .[12] = "MSDOS_INFO",
  .[13] = "SHORT_NAME",
  .[14] = "AFP_INFO",
  .[15] = "DIRECTORY_ID",
];

type EntryDescriptorId = struct {
  uint32 id;
  method _print = void: {
    if (id in AS_TYPES) {
      printf "%s(%u32d)", AS_TYPE_NAME[id], id;
    } else {
      printf "%u32d", id;
    }
  }
};

type EntryDescriptor = struct {
  EntryDescriptorId _id;
  offset<uint32,B> _offset;
  offset<uint32,B> _len;
  method id = uint32: {
    return _id.id;
  }
  method next_offset = offset<uint32,B>: {
    return _offset + _len;
  }
  method as_segment = Segment: {
    return Segment {
      ios=_id'ios,
      offset=_offset,
      len=_len,
    };
  }
};

fun entrydescriptor = (
  uint32 id,
  offset<uint32,B> len,
  offset<uint32,B> offset=0#B
) EntryDescriptor: {
  return EntryDescriptor {
    _id=EntryDescriptorId { id=id },
    _offset=offset,
    _len=len,
  };
};

type AppleSingleHeader = struct {
  uint32 magic = 0x0005_1600;
  uint32 version = 0x0002_0000;
  uint16 n_entries @ 24#B;
  EntryDescriptor[n_entries] descriptors;
  var _size = OFFSET;

  method get_entries_by_type = (uint32 id) EntryDescriptor[]: {
    var entries = EntryDescriptor[]();
    for (entry in descriptors where entry.id == id) {
      entries += [entry];
    }
    return entries;
  }

  method has_entry = (uint32 id) int: {
    return (get_entries_by_type(id))'length;
  }

  method get_entry = (uint32 id) EntryDescriptor: {
    for (descriptor in get_entries_by_type(id)) {
      return descriptor;
    }
  }

  method get_segment = (uint32 id) Segment: {
    return get_entry(id).as_segment;
  }

  method _entry_data = (uint32 id) byte[]: {
    var descriptor = get_entry(id);
    return byte[descriptor._len / #B] @ descriptor._offset;
  }

  method data_fork = byte[]: {
    return _entry_data(AS_DATA);
  }

  method resource_fork = byte[]: {
    return _entry_data(AS_RSRC);
  }

  method filename = string: {
    return catos(_entry_data(AS_REAL_NAME));
  }

  method has_filename = uint: {
    return has_entry(AS_REAL_NAME);
  }

  method finder_info = FinderInfo: {
    return FinderInfo @ get_entry(AS_FINDER_INFO)._offset;
  }

  method has_finder_info = uint: {
    return has_entry(AS_FINDER_INFO);
  }

  method file_dates = FileDates: {
    return FileDates @ get_entry(AS_FILE_DATES)._offset;
  }

  method has_file_dates = uint: {
    return has_entry(AS_FILE_DATES);
  }

  method comment = string: {
    try {
      return catos(_entry_data(AS_COMMENT));
    } catch if E_eof {
      var entry = get_entry(AS_COMMENT);
      var array = char[] @ entry._offset;
      return catos(array);
    }
  }

  method has_comment = uint: {
    return has_entry(AS_COMMENT);
  }

  method calculate_offsets = void: {
    var descriptors = descriptors;
    descriptors[0]._offset = _size;
    for (var i = 1; i < descriptors'length; i += 1) {
      var previous = descriptors[i - 1];
      var current = descriptors[i];
      current._offset = previous.next_offset;
    }
  }

};

fun applesinglersrc = (AppleSingleHeader header) RsrcFork: {
  var rsrc = header.get_entry(AS_RSRC);
  return RsrcFork @ header'ios : rsrc._offset;
}
