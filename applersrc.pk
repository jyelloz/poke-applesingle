load applebase;

type RsrcHeader = struct {
  offset<uint32,B> data_offset;
  offset<uint32,B> map_offset;
  offset<uint32,B> data_size;
  offset<uint32,B> map_size;
};

type RsrcDataBlock = struct {
  offset<uint32,B> data_len;
  byte[0] data @ OFFSET;
  byte[0] @ OFFSET + data_len;
};

type RsrcMap = struct {
  RsrcHeader _reserved_header;
  uint32 next_resource_map;
  uint16 file_ref;
  uint16 attributes;
  offset<uint16,B> type_list_offset;
  offset<uint16,B> name_list_offset;
};

type CountOrNone = struct {
  uint16 _count;
  method count = uint16: {
    if (_count == 0xFFFF) {
      return 0;
    }
    return _count + 1;
  }
  method _print = void: {
    printf "%v", count;
  }
};

type RsrcTypeRecord = struct {
  OSType rsrc_type;
  CountOrNone count;
  offset<uint16,B> rsrc_list_offset;
  method rsrc_type_name = string: {
    return catos(rsrc_type.data);
  }
};

type RsrcRecord = struct {
  int16 id;
  offset<uint16,B> name_offset;
  byte attributes;
  offset<uint<24>,B> data_offset;
  uint32 resource_ptr;
};

type RsrcTypeList = struct {
  CountOrNone count;
  RsrcTypeRecord[count.count] types;
  method type_name = (string name) RsrcTypeRecord: {
    for (rsrc in types where rsrc.rsrc_type_name == name) {
      return rsrc;
    }
    raise E_elem;
  }
  method rsrc_name = (string name) RsrcRecord[]: {
    var rsrc_type = type_name(name);
    var offset = count'offset + rsrc_type.rsrc_list_offset;
    return RsrcRecord[rsrc_type.count.count] @ offset;
  }
};

type PString = struct {
  offset<uint8,B> len;
  char[len] _text;
  method text = string: {
    return catos(_text);
  }
  method _print = void: {
    printf "%v", text;
  }
};

type RsrcName = PString;

type RsrcFork = struct {
  RsrcHeader header;
  RsrcMap map @ header.map_offset;
  RsrcDataBlock[header.data_size] data @ header.data_offset;
  RsrcTypeList types @ header.map_offset + map.type_list_offset;
  RsrcName[header.map_size - map.name_list_offset] names
    @ header.map_offset + map.name_list_offset;
};
